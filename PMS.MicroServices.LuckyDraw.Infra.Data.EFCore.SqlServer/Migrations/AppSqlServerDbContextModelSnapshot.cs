// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.SqlServer.Contexts;

#nullable disable

namespace PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.SqlServer.Migrations
{
    [DbContext(typeof(AppSqlServerDbContext))]
    partial class AppSqlServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.AssessmentResultDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("BelongsToManagementTeam")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasImmediateSubordinates")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMediateSubordinates")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IdSortition")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdSortition");

                    b.ToTable("AssessmentResult", "dbo");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.DocumentTemplateDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTemplate", "dbo");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdTeam")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTeam");

                    b.ToTable("Sortition", "dbo");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionParticipantDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessCounter")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSortition")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSortition");

                    b.ToTable("SortitionParticipant", "dbo");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionParticipantPrintingDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSortition")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdSortition");

                    b.ToTable("SortitionParticipantPrinting", "dbo");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.TeamDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Team", "dbo");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.AssessmentResultDataModel", b =>
                {
                    b.HasOne("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionDataModel", "Sortition")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("IdSortition")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Sortition");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionDataModel", b =>
                {
                    b.HasOne("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.TeamDataModel", "Team")
                        .WithMany()
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionParticipantDataModel", b =>
                {
                    b.HasOne("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionDataModel", "Sortition")
                        .WithMany("Participants")
                        .HasForeignKey("IdSortition")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sortition");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionParticipantPrintingDataModel", b =>
                {
                    b.HasOne("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionDataModel", "Sortition")
                        .WithMany("Impressions")
                        .HasForeignKey("IdSortition")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sortition");
                });

            modelBuilder.Entity("PMS.MicroServices.LuckyDraw.Infra.Data.EFCore.DataModels.SortitionDataModel", b =>
                {
                    b.Navigation("AssessmentResults");

                    b.Navigation("Impressions");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
